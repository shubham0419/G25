// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String        @id @default(uuid())
  email       String        @unique
  name        String? //optonal field -->?
  posts       Post[] // stores the post of user
  comments    Comment[] // reltion with comments , stores user's comments
  enrollments Enrollment[]
  balance     Float         @default(0)
  sentTrns    Transaction[] @relation("sender")
  receiveTrns Transaction[] @relation("receiver")
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Transaction {
  id         String   @id @default(uuid())
  amount     Float
  senderId   String
  receiverId String
  sender     User     @relation("sender", fields: [senderId], references: [id])
  receiver   User     @relation("receiver", fields: [receiverId], references: [id])
  createdAt  DateTime @default(now())
}

model Courses {
  id         String       @id @default(uuid())
  name       String
  credits    Int
  enrollment Enrollment[]
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

model Enrollment {
  id        String   @id @default(uuid())
  courseId  String
  course    Courses  @relation(fields: [courseId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id          String    @id @default(uuid())
  title       String
  description String
  // authorEmail String
  // author User @relation(fields: [authorEmail],references: [email])
  authorId    String
  author      User      @relation(fields: [authorId], references: [id])
  comments    Comment[]
}

model Comment {
  id       String @id @default(uuid())
  comment  String
  authorId String
  author   User   @relation(fields: [authorId], references: [id])
  postId   String
  post     Post   @relation(fields: [postId], references: [id])
}
